
@startuml
'title "SW Task Framework - Component & Connector View (Backward Compatible Design)"

!define COMPONENT_COLOR #E6F3FF
!define CONNECTOR_COLOR #FFE6E6
!define INTERFACE_COLOR #E6FFE6

package "Client Applications" as ClientApps {
    component [Legacy Tiger Application] as LegacyApp COMPONENT_COLOR
    component [Modern C++ Application] as ModernApp COMPONENT_COLOR
}

package "SW Task Framework" as Framework #LightBlue {
    
    package "API Layer" as APILayer {
        interface "Message API" as MessageAPI INTERFACE_COLOR
        interface "Function API" as FunctionAPI INTERFACE_COLOR
        
        component [Handler\n(Legacy Preserved)] as Handler COMPONENT_COLOR
        component [SLLooper\n(Enhanced Facade)] as SLLooper COMPONENT_COLOR
        
        Handler -up- MessageAPI
        SLLooper -up- FunctionAPI
    }
    
    package "Processing Layer" as ProcessingLayer {
        component [EventQueue\n(Unified)] as EventQueue COMPONENT_COLOR
        
        interface "Queue Operations" as QueueOps INTERFACE_COLOR
        EventQueue -up- QueueOps
    }
    
    package "Execution Layer" as ExecutionLayer {
        component [Event Loop\n(Main Thread)] as EventLoop COMPONENT_COLOR
        component [Message Dispatcher] as MessageDispatcher COMPONENT_COLOR
        component [Function Executor] as FunctionExecutor COMPONENT_COLOR
        
        interface "Event Processing" as EventProc INTERFACE_COLOR
        EventLoop -up- EventProc
    }
}

' Client connections
LegacyApp ..> MessageAPI : uses
ModernApp ..> FunctionAPI : uses

' Internal connections
Handler ..> QueueOps : enqueueMessage()
SLLooper ..> QueueOps : enqueueFunction()

SLLooper ..> EventProc : pollNext()
EventLoop ..> QueueOps : pollNext()

EventLoop --> MessageDispatcher : MESSAGE type
EventLoop --> FunctionExecutor : FUNCTION type

MessageDispatcher ..> Handler : dispatchMessage()


@enduml

